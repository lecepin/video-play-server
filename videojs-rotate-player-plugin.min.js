/*! @name videojs-rotate-player-plugin @version 1.0.1 @license Apache-2.0 */
!(function (t, e) {
  "object" == typeof exports && "undefined" != typeof module
    ? (module.exports = e(require("video.js")))
    : "function" == typeof define && define.amd
    ? define(["video.js"], e)
    : (t.videojsRotatePlayerPlugin = e(t.videojs));
})(this, function (t) {
  "use strict";
  function e(t, e) {
    (t.prototype = Object.create(e.prototype)),
      (t.prototype.constructor = t),
      (t.__proto__ = e);
  }
  var r = (t = t && t.hasOwnProperty("default") ? t.default : t).getPlugin(
      "plugin"
    ),
    o = {},
    n = (function (t) {
      function r(e, r) {
        var o;
        return (
          ((o = t.call(this, e, r) || this)._currentRotateDeg = 0),
          o.controlText("Rotate"),
          o
        );
      }
      e(r, t);
      var o = r.prototype;
      return (
        (o.buildCSSClass = function () {
          return "vjs-control vjs-button rotate-0";
        }),
        (o.handleClick = function () {
          this.removeClass("rotate-" + this._currentRotateDeg);

          var t = this._currentRotateDeg + 90,
            e =
              t % 180 == 0
                ? 1
                : this.player_.children_[0].videoWidth /
                  this.player_.children_[0].videoHeight;
          t % 360 == 0 && (this._currentRotateDeg = 0),
            (this._currentRotateDeg = t % 360 == 0 ? 0 : t),
            this.player()
              .rotatePlayerPlugin()
              .rotate({ rotate: this._currentRotateDeg, zoom: e }),
            this.addClass("rotate-" + this._currentRotateDeg);
        }),
        r
      );
    })(t.getComponent("button")),
    a = (function (r) {
      function n(e, n) {
        var a;
        return (
          ((a = r.call(this, e) || this).options = t.mergeOptions(o, n)),
          (a._prop = null),
          a.player.ready(function () {
            a.player.addClass("vjs-rotate-player-plugin"),
              a.findSupportTransformProperty(),
              a.player.getChild("controlBar").addChild("rotatePlayerButton");
          }),
          a
        );
      }
      e(n, r);
      var a = n.prototype;
      return (
        (a.findSupportTransformProperty = function () {
          var t = this.player,
            e = [
              "transform",
              "WebkitTransform",
              "MozTransform",
              "msTransform",
              "OTransform",
            ];
          if (((this._prop = e[0]), void 0 !== t.style))
            for (var r = 0; r < e.length; r++) {
              var o = e[r];
              if (void 0 !== t.style[o]) {
                this._prop = o;
                break;
              }
            }
        }),
        (a.rotate = function (t) {
          var e = this.player.el(),
            r = e.getElementsByClassName("vjs-tech")[0],
            o = e.getElementsByClassName("vjs-poster")[0];
          (e.style.overflow = "hidden"),
            (r.style[this._prop] =
              "scale(" + t.zoom + ") rotate(" + t.rotate + "deg)"),
            (o.style[this._prop] =
              "scale(" + t.zoom + ") rotate(" + t.rotate + "deg)");
        }),
        n
      );
    })(r);
  return (
    (a.defaultState = {}),
    (a.VERSION = "1.0.1"),
    t.registerComponent("rotatePlayerButton", n),
    t.registerPlugin("rotatePlayerPlugin", a),
    a
  );
});
